# visualization.py
import streamlit as st
from rdkit import Chem
from rdkit.Chem import Draw
import math

def create_molecule_grid(mols, cols_per_row, subimg_size=(300, 300)):
    """Cr√©e une grille d'images de mol√©cules."""
    if not mols:
        return None
        
    return Draw.MolsToGridImage(
        mols,
        molsPerRow=cols_per_row,
        subImgSize=subimg_size,
        legends=[f"Mol_{i+1}" for i in range(len(mols))]
    )

def render_visualization_page():
    """Rendu de la page de visualisation."""
    st.header("üîç Visualisation des Mol√©cules")
    
    if 'generated_smiles' not in st.session_state:
        st.info("Veuillez d'abord g√©n√©rer des mol√©cules dans l'onglet G√©n√©ration")
        return
        
    # Conversion des SMILES en mol√©cules
    mols = [Chem.MolFromSmiles(smile) for smile in st.session_state['generated_smiles']]
    mols = [mol for mol in mols if mol is not None]  # Filtrer les mol√©cules invalides
    
    if not mols:
        st.warning("Aucune mol√©cule valide √† afficher")
        return
    
    # Options de visualisation
    col1, col2 = st.columns(2)
    
    with col1:
        cols_per_row = st.slider(
            "Nombre de mol√©cules par ligne",
            2, 6, 4,
            help="Ajuster le nombre de mol√©cules affich√©es par ligne"
        )
        
    with col2:
        show_count = st.slider(
            "Nombre de mol√©cules √† afficher",
            1, len(mols), min(20, len(mols)),
            help="Nombre total de mol√©cules √† afficher"
        )
    
    # Options suppl√©mentaires
    with st.expander("Options avanc√©es"):
        img_size = st.slider(
            "Taille des images (pixels)",
            100, 500, 300,
            help="Taille de chaque image de mol√©cule"
        )
        show_index = st.checkbox(
            "Afficher les num√©ros",
            True,
            help="Afficher le num√©ro de chaque mol√©cule"
        )
    
    # Affichage des mol√©cules
    st.subheader(f"Visualisation des mol√©cules (1-{show_count})")
    
    # Cr√©er des lignes de mol√©cules
    for i in range(0, show_count, cols_per_row):
        cols = st.columns(cols_per_row)
        for j, col in enumerate(cols):
            if i + j < show_count and i + j < len(mols):
                mol = mols[i + j]
                img = Draw.MolToImage(mol, size=(img_size, img_size))
                caption = f"Mol√©cule {i+j+1}\n{Chem.MolToSmiles(mol)}" if show_index else Chem.MolToSmiles(mol)
                col.image(img, caption=caption, use_column_width=True)
    
    # Option de t√©l√©chargement de la grille compl√®te
    if st.button("üì• G√©n√©rer une grille d'images"):
        grid_img = create_molecule_grid(
            mols[:show_count],
            cols_per_row,
            (img_size, img_size)
        )
        if grid_img:
            st.image(grid_img)
            # Conversion de l'image pour le t√©l√©chargement
            from io import BytesIO
            buf = BytesIO()
            grid_img.save(buf, format="PNG")
            st.download_button(
                "üíæ T√©l√©charger la grille",
                buf.getvalue(),
                "molecule_grid.png",
                "image/png"
            )

if __name__ == "__main__":
    st.set_page_config(page_title="Visualisation de Mol√©cules", layout="wide")
    render_visualization_page()
